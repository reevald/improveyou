# Generated by Django 4.2.3 on 2023-08-12 16:02

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("activities", "__first__"),
        ("items", "__first__"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("tasks", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("email_validated", models.BooleanField(default=False)),
                (
                    "username",
                    models.CharField(
                        max_length=14,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(6)],
                    ),
                ),
                ("last_username_changed", models.DateTimeField(blank=True, null=True)),
                (
                    "tier",
                    models.CharField(
                        choices=[("basic", "BASIC"), ("premium", "PREMIUM")],
                        default="basic",
                        max_length=32,
                    ),
                ),
                ("is_public_mode", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("ban_status", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="DailyCheckQuestion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("question", models.TextField(blank=True, null=True)),
                ("availability", models.BooleanField(default=False)),
                (
                    "type_answer",
                    models.CharField(
                        choices=[("limited", "LIMITED"), ("free", "FREE")],
                        max_length=32,
                    ),
                ),
                ("limited_answer", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "users_daily_check_questions",
            },
        ),
        migrations.CreateModel(
            name="GameStat",
            fields=[
                (
                    "user_id",
                    models.OneToOneField(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("gold", models.IntegerField(default=0)),
                ("poin_brain", models.IntegerField(default=0)),
                ("poin_heart", models.IntegerField(default=0)),
                ("poin_muscle", models.IntegerField(default=0)),
                ("streak_current", models.IntegerField(default=0)),
                ("streak_percent_interest", models.IntegerField(default=0)),
                ("last_exchange", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "users_game_stats",
            },
        ),
        migrations.CreateModel(
            name="TaskLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("current_progress", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "task_id",
                    models.ForeignKey(
                        db_column="task_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tasks.task",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "users_task_log",
            },
        ),
        migrations.CreateModel(
            name="ResetPasswordToken",
            fields=[
                (
                    "token",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("issue_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("exp_at", models.DateTimeField(blank=True, null=True)),
                ("reset_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "reset_password_tokens",
            },
        ),
        migrations.CreateModel(
            name="EmailVerificationToken",
            fields=[
                (
                    "token",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("issue_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("exp_at", models.DateTimeField(blank=True, null=True)),
                ("verify_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "email_verification_tokens",
            },
        ),
        migrations.CreateModel(
            name="Bag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("default", "DEFAULT"),
                            ("event", "EVENT"),
                            ("shop", "SHOP"),
                        ],
                        max_length=32,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "item_id",
                    models.ForeignKey(
                        db_column="item_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="items.item",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "users_bags",
                "unique_together": {("user_id", "item_id")},
            },
        ),
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("finished", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("play_at", models.DateTimeField(blank=True, null=True)),
                ("finish_at", models.DateTimeField(blank=True, null=True)),
                ("track", models.TextField(blank=True, null=True)),
                (
                    "activity_id",
                    models.ForeignKey(
                        db_column="activity_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="activities.activity",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "users_activity_log",
            },
        ),
        migrations.AddField(
            model_name="user",
            name="bag_items",
            field=models.ManyToManyField(through="users.Bag", to="items.item"),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="RecommendationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("prediction", models.FloatField(blank=True, null=True)),
                (
                    "urge_level",
                    models.CharField(
                        choices=[
                            ("very_low", "VERY_LOW"),
                            ("low", "LOW"),
                            ("medium", "MEDIUM"),
                            ("high", "HIGH"),
                            ("very_heigh", "VERY_HEIGH"),
                        ],
                        default="medium",
                        max_length=32,
                    ),
                ),
                ("issue_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "users_recommendation_log",
                "unique_together": {("user_id", "issue_at")},
            },
        ),
        migrations.CreateModel(
            name="Object",
            fields=[
                (
                    "user_id",
                    models.OneToOneField(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                (
                    "background_id",
                    models.ForeignKey(
                        blank=True,
                        db_column="background_id",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_background",
                        to="items.item",
                    ),
                ),
                (
                    "character_id",
                    models.ForeignKey(
                        blank=True,
                        db_column="character_id",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_character",
                        to="items.item",
                    ),
                ),
                (
                    "clothes_id",
                    models.ForeignKey(
                        blank=True,
                        db_column="clothes_id",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_clothes",
                        to="items.item",
                    ),
                ),
                (
                    "hat_id",
                    models.ForeignKey(
                        blank=True,
                        db_column="hat_id",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_hat",
                        to="items.item",
                    ),
                ),
                (
                    "shoes_id",
                    models.ForeignKey(
                        blank=True,
                        db_column="shoes_id",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_shoes",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "users_objects",
            },
        ),
        migrations.CreateModel(
            name="EventReward",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("rewards_claimed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "event_id",
                    models.ForeignKey(
                        db_column="event_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="items.event",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "users_events_rewards",
                "unique_together": {("user_id", "event_id")},
            },
        ),
        migrations.CreateModel(
            name="DailyCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date_target", models.DateTimeField(blank=True, null=True)),
                (
                    "streak_status",
                    models.CharField(
                        choices=[
                            ("none", "NONE"),
                            ("continue", "CONTINUE"),
                            ("discontinue", "DISCONTINUE"),
                        ],
                        default="none",
                        max_length=32,
                    ),
                ),
                ("other_questions", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "users_daily_check",
                "unique_together": {("user_id", "date_target")},
            },
        ),
    ]
