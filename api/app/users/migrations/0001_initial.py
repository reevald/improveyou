# Generated by Django 4.2.3 on 2023-07-31 16:30

import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("email_validated", models.BooleanField(default=False)),
                (
                    "username",
                    models.CharField(
                        max_length=14,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(6)],
                    ),
                ),
                ("last_username_changed", models.DateTimeField(blank=True, null=True)),
                (
                    "tier",
                    models.CharField(
                        choices=[("basic", "BASIC"), ("premium", "PREMIUM")],
                        default="basic",
                        max_length=32,
                    ),
                ),
                ("is_public_mode", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("ban_status", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="GameStats",
            fields=[
                (
                    "user_id",
                    models.OneToOneField(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("gold", models.IntegerField(default=0)),
                ("poin_brain", models.IntegerField(default=0)),
                ("poin_heart", models.IntegerField(default=0)),
                ("poin_muscle", models.IntegerField(default=0)),
                ("streak_current", models.IntegerField(default=0)),
                ("streak_percent_interest", models.IntegerField(default=0)),
                ("last_exchange", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "users_game_stats",
            },
        ),
        migrations.CreateModel(
            name="ResetPasswordTokens",
            fields=[
                (
                    "token",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("issue_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("exp_at", models.DateTimeField(blank=True, null=True)),
                ("reset_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "reset_password_tokens",
            },
        ),
        migrations.CreateModel(
            name="EmailVerificationTokens",
            fields=[
                (
                    "token",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("issue_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("exp_at", models.DateTimeField(blank=True, null=True)),
                ("verify_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "email_verification_tokens",
            },
        ),
        migrations.CreateModel(
            name="DailyCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid1,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date_target", models.DateTimeField(blank=True, null=True)),
                (
                    "streak_status",
                    models.CharField(
                        choices=[
                            ("none", "NONE"),
                            ("continue", "CONTINUE"),
                            ("discontinue", "DISCONTINUE"),
                        ],
                        default="none",
                        max_length=32,
                    ),
                ),
                ("other_questions", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user_id",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "users_daily_check",
                "unique_together": {("user_id", "date_target")},
            },
        ),
    ]
